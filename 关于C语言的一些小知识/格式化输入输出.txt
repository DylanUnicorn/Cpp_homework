讲解什么格式化，原因：
格式化输入输出：
printf函数称为格式化输出函数，关键在最后一个f表示“格式”（format）之意
作用：把指定的各种数据类型显示到显示器屏幕上
printf是一个标准的库函数，他的函数原型在头文件stdio.h中。
 
输出函数的格式：printf函数的一般格式形式：
printf（“格式控制字符串”，输出列表）；
格式控制字符串：用于指定输出格式，
格式控制字符串是以%开头的的字符串，在%后面跟着各种格式字符以说明输出数据的类型，形式，长度，小数位数等等。
 
 
 
 
格式符，及其含义表：
ex：
int a = 65, b = 66;
    printf("%d %d\n", a, b);
    printf("%d,%d\n", a, b);
    printf("%c,%c\n", a, b);   这个会输出 这个十进制数的ASCII码上相对应的字符。
    printf("a=%d,b=%d\n", a, b);
     
    int a=-1;
    printf("%u\n",a);//  %u 是无符号的usigned类型，-1是有符号的，在二进制形式里最高位为1，但是输出的是无符号的，最高位的符号为就成了一个很大的数，把符号位也算成数了。
    输出结果是上亿的一个数。
    printf（“%o\n",a);// 以八进制无符号形式输出，系统会把这个八进制转换成二进制，在输出，最高位依然是1，输出的又是无符号形式，就会一个很大得数。
    printf("%x\n",a);//以十六进制形式输出无符号整数，结果位0xffffffff  
                              -1的二进制原码：1000000 00000000 00000000 00000001
                                              补码：1111111 11111111 11111111 11111111
                                                  这个补码是二进制，输出是转换成十六进制，二进制转换成十六进制每四位，  先把二进制每四位转换成10进制，1111=15=f。输出就是8个f
                                                   
       float a=1.1；                                           
  printf("%f\n”，a);//以小数形式输出。int类型输出的是0.000000  float类型，精确到小数点后面的六位  ，输出的是1.100000
  printf("%e\n",a);//以指数形式输出
  char a='a';
  printf("%c\n",a);//输出单个字符
  printf("%s\n",a;//输出字符串
  注意：%ld  用于长整形数据的输出  %hd用于短整形数据输出  %lf用于双精度型数据的输出
   
   
  格式标识符：%-d:结果左对其，右边填空格
                     %+d：输出符号
                     %空格d：输出地值为正时冠以空格，输出的值为负时冠以负号。
                     %#d；对c，s，d，u类无影响
                            对o类：在输出是加前缀0
                            对x类：在输出时加前缀0x
                            对e，g，f类当结果有小数时才给出小数
                             
   
  ex：
  int a = 15;
    float b = 12.1234567;
    double c = 12345678.1234567;
    char d = 'c';
    printf("a=%d,%+d,%5d,%-5d,%o,%x,%#x\n", a, a, a, a, a, a, a);
    printf("b=%f,%8.2f,%e\n", b, b, b);
    printf("c=%lf,%f,%8.41f\n",c,c,c);
    printf("d=%c,%8c\n", d, d);
    printf("%5.4s\n", "program");
     
    第一个：a=15  
               +15：+代表输出符号
                三个空格15：输出宽度为5个，15占了2个，前面补三个空格
                15三个空格：输出宽度也为5个，-代表左对齐，所以在右边补三个空格
                17:%0输出15的八进制为17
                f：15的十六进制为f
                0xf：再输出时加前缀ox
                 
    第二个:b=12.123457  单精度6位-7位  双精度double 15位-16位
              三个空格12.12:8.2f 表示宽度为8个，2表示精确小数点后面2位，所以输出12.12，又要8个宽度，所以补3个空格
              指数形式
               
     第三个：
     12345678.123457：一样的  
     12345678.123457：一样的 输出都是double双精度型  能输出15-16位
     12345678.1235:8.4lf，由于精度定位为4位所以截去了超过4位的部分，由于总位数为8为，所以按截断小数部分的实际位数显示
      
     第四个：
     d=p：%c输出单个字符
     7个空格p:%8c，输出长度为8位，所以前面补7个空格
      
     第五个：
    空格prog:%5.4s，5表示5个长度，后面的精度取前面的4个字符显示，但是要求5个长度，所以在前面补一个空格
     
     
  注意在VSC++中，编译器的求值顺序是不一定相同的在不同的编译系统中：
  Visual C++中时从右往左进行的：
  ex：
  int  i=8；
  printf（“%d，%d\n",i+=4,i+=5);
  i=8;
  printf("%d",i+=4)
  printf("%d\n",i+=5);
   
  输出结果是：17 13
                     12  17
                     最开始是求得i+=5，-》8+=5-》i=13-》13再+=4-》17  所以两次运算一次等于13  一次等于17
                      但是编译器输出的时候是从左往右的
                      编译器求值是从右往左，输出好似从左往右的
   
   